/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define _DEFAULT 0
#define _GAME 1
#define _LOWER 2
#define _NUM 3
#define _SYS 4
#define none_layer 15

/ {
    keymap {
        compatible = "zmk,keymap";

        _DEFAULT {
            bindings = <
&kp TAB     &kp Q       &kp W       &kp E       &kp R       &kp T               &kp Y      &kp U          &kp I       &kp O       &kp P       &kp BSLH
&kp LSHFT   &kp A       &kp S       &kp D       &kp F       &kp G               &kp H      &kp J          &kp K       &kp L       &kp SEMI    &lt _NUM SQT
&kp LCTRL   &kp Z       &kp X       &kp C       &kp V       &kp B               &kp N      &kp M          &kp COMMA   &kp DOT     &kp FSLH    &lt _SYS ESC
                                    &kp LALT    &mo _LOWER  &mo _NUM            &mt LGUI BSPC &kp SPACE   &kp RET
            >;
        };

        _GAME {
            bindings = <
&kp TAB     &kp Q       &kp W       &kp E       &kp R       &kp T               &kp Y       &kp U        &kp I       &kp O       &kp P       &kp BSLH
&kp LSHFT   &kp A       &kp S       &kp D       &kp F       &kp G               &kp H       &kp J        &kp K       &kp L       &kp SEMI    &lt _NUM SQT
&kp LCTRL   &kp Z       &kp X       &kp C       &kp V       &kp B               &kp N       &kp M        &kp COMMA   &kp DOT     &kp FSLH    &lt _SYS ESC
                                    &kp LALT    &kp SPACE   &mo _NUM            &mt LGUI BSPC &kp SPACE  &kp RET
            >;
        };

        _LOWER {
            bindings = <
&kp ESC     &kp SPACE   &kp RET     &kp BSPC    &kp DEL     &kp C_VOL_UP        &kp GRAVE   &kp EQUAL   &kp UP      &kp MINUS   &kp LC(P)   &none       
&trans      &kp LC(A)   &kp LC(S)   &none       &kp LC(F)   &kp C_MUTE          &kp HOME    &kp LEFT    &kp DOWN    &kp RIGHT   &kp END     &kp PG_UP   
&trans      &kp LC(Z)   &kp LC(X)   &kp LC(C)   &kp LC(V)   &kp C_VOL_DN        &kp LBKT    &kp RBKT    &kp LPAR    &kp RPAR    &none       &kp PG_DN   
                                    &trans      &none       &none               &kp DEL     &kp SPACE   &kp RET
            >;
        };

        _NUM {
            bindings = <
&trans      &kp F1      &kp F4      &kp F7      &kp F10     &kp C_PREV          &kp PLUS    &kp N7      &kp N8        &kp N9          &kp STAR     &none
&trans      &kp F2      &kp F5      &kp F8      &kp F11     &kp C_PP            &kp MINUS   &kp N4      &kp N5        &kp N6          &kp DOT      &none
&trans      &kp F3      &kp F6      &kp F9      &kp F12     &kp C_NEXT          &none       &kp N1      &kp N2        &kp N3          &kp FSLH     &none
                                    &trans      &none       &none               &mt LGUI BSPC &kp N0    &trans
            >;
        };

        _SYS {
            bindings = <
&trans      &bt BT_PRV   &bt BT_NXT   &none        &none        &bt BT_CLR      &none       &none       &none       &none       &none       &none
&trans      &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4    &tog _GAME  &none       &none       &none       &none       &none
&trans      &out OUT_USB &out OUT_BLE &none        &none        &none           &none       &none       &none       &none       &none       &none
                                      &trans       &none        &none           &none       &none       &none
            >;
        }; 
        
        none_layer {
            bindings = <
&trans      &none       &none       &none       &none       &none               &none       &none       &none       &none       &none       &none
&trans      &none       &none       &none       &none       &none               &none       &none       &none       &none       &none       &none
&trans      &none       &none       &none       &none       &none               &none       &none       &none       &none       &none       &none
                                    &trans      &none       &none               &none       &none       &none
            >;
        };
    };
};
